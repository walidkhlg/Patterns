provider "aws" {
  region  = "${var.aws_region}"
  profile = "${var.aws_profile}"
}

######### VPC #####

resource "aws_vpc" "pattern1" {
  cidr_block           = "${var.vpc_cidr}"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags {
    Name = "pattern1"
  }
}
#

resource "aws_iam_instance_profile" "web_s3_profile" {
  name = "web_s3_profile"
  role = "ec2tos3"
}
#IGW

resource "aws_internet_gateway" "pattern1" {
  vpc_id = "${aws_vpc.pattern1.id}"

  tags {
    Name = "pattern1_igw"
  }
}

#Route Tables

resource "aws_route_table" "public_rt" {
  vpc_id = "${aws_vpc.pattern1.id}"

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = "${aws_internet_gateway.pattern1.id}"
  }

  tags {
    Name = "public_rt"
  }
}

resource "aws_default_route_table" "private_rt" {
  default_route_table_id = "${aws_vpc.pattern1.default_route_table_id}"

  tags {
    Name = "private_rt"
  }
}

#Subnets

resource "aws_subnet" "public1_subnet" {
  cidr_block              = "${var.cidrs["public1"]}"
  vpc_id                  = "${aws_vpc.pattern1.id}"
  map_public_ip_on_launch = true
  availability_zone       = "${data.aws_availability_zones.available.names[0]}"

  tags {
    Name = "public1"
  }
}

resource "aws_subnet" "public2_subnet" {
  cidr_block              = "${var.cidrs["public2"]}"
  vpc_id                  = "${aws_vpc.pattern1.id}"
  map_public_ip_on_launch = true
  availability_zone       = "${data.aws_availability_zones.available.names[1]}"

  tags {
    Name = "public2"
  }
}

resource "aws_subnet" "private1_subnet" {
  cidr_block              = "${var.cidrs["private1"]}"
  vpc_id                  = "${aws_vpc.pattern1.id}"
  map_public_ip_on_launch = false
  availability_zone       = "${data.aws_availability_zones.available.names[0]}"

  tags {
    Name = "private1"
  }
}

resource "aws_subnet" "private2_subnet" {
  cidr_block              = "${var.cidrs["private2"]}"
  vpc_id                  = "${aws_vpc.pattern1.id}"
  map_public_ip_on_launch = false
  availability_zone       = "${data.aws_availability_zones.available.names[1]}"

  tags {
    Name = "private2"
  }
}

resource "aws_subnet" "rds1_subnet" {
  cidr_block              = "${var.cidrs["rds1"]}"
  vpc_id                  = "${aws_vpc.pattern1.id}"
  map_public_ip_on_launch = false
  availability_zone       = "${data.aws_availability_zones.available.names[0]}"

  tags {
    Name = "rds1"
  }
}

resource "aws_subnet" "rds2_subnet" {
  cidr_block              = "${var.cidrs["rds2"]}"
  vpc_id                  = "${aws_vpc.pattern1.id}"
  map_public_ip_on_launch = false
  availability_zone       = "${data.aws_availability_zones.available.names[1]}"

  tags {
    Name = "rds2"
  }
}

resource "aws_db_subnet_group" "rds_subnetgroup" {
  name       = "web_rds_subnet_group"
  subnet_ids = ["${aws_subnet.rds1_subnet.id}", "${aws_subnet.rds2_subnet.id}"]

  tags {
    Name = "web-rds-subnet-group"
  }
}

####### subnet associations ##########

resource "aws_route_table_association" "web-public-assoc1" {
  route_table_id = "${aws_route_table.public_rt.id}"
  subnet_id      = "${aws_subnet.public1_subnet.id}"
}

resource "aws_route_table_association" "web-public-assoc2" {
  route_table_id = "${aws_route_table.public_rt.id}"
  subnet_id      = "${aws_subnet.public2_subnet.id}"
}

resource "aws_route_table_association" "web-private-assoc1" {
  route_table_id = "${aws_default_route_table.private_rt.id}"
  subnet_id      = "${aws_subnet.private1_subnet.id}"
}

resource "aws_route_table_association" "web-private-assoc2" {
  route_table_id = "${aws_default_route_table.private_rt.id}"
  subnet_id      = "${aws_subnet.private2_subnet.id}"
}

####### Security Groups ####################

resource "aws_security_group" "sg-elb" {
  name   = "allow_web"
  vpc_id = "${aws_vpc.pattern1.id}"

  ingress {
    from_port   = 80
    protocol    = "tcp"
    to_port     = 80
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    protocol         = "-1"
    to_port          = 0
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags {
    Name = "sg-elb-walid"
  }
}

resource "aws_security_group" "sg-private" {
  name   = "sg_private-walid"
  vpc_id = "${aws_vpc.pattern1.id}"


  ingress {
    from_port   = 0
    protocol    = "-1"
    to_port     = 0
    cidr_blocks = ["${var.vpc_cidr}"]
  }

  egress {
    from_port   = 0
    protocol    = "-1"
    to_port     = 0
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags {
    Name = "sg_private-walid"
  }
}

resource "aws_security_group" "rds-sg" {
  name   = "rds-sg-walid"
  vpc_id = "${aws_vpc.pattern1.id}"

  ingress {
    from_port       = 3306
    protocol        = "tcp"
    to_port         = 3306
    security_groups = ["${aws_security_group.sg-private.id}"]
  }

  tags {
    Name = "rds-sg-walid"
  }
}

############# RDS ##############

resource "aws_db_instance" "web-db" {
  allocated_storage       = "10"
  engine                  = "mysql"
  #engine_version          = "5.7"
  instance_class          = "${var.db_instance_class}"
  name                    = "${var.db_name}"
  username                = "${var.db_user}"
  password                = "${var.db_password}"
  db_subnet_group_name    = "${aws_db_subnet_group.rds_subnetgroup.name}"
  vpc_security_group_ids  = ["${aws_security_group.rds-sg.id}"]
  skip_final_snapshot     = true
  availability_zone       = "${data.aws_availability_zones.available.names[0]}"
  backup_retention_period = "1"

  tags {
    Name = "web-db-walid"
  }
}

resource "aws_db_instance" "web-db-replica1" {
  replicate_source_db = "${aws_db_instance.web-db.name}"
  instance_class      = "${aws_db_instance.web-db.instance_class}"
  availability_zone   = "${data.aws_availability_zones.available.names[0]}"
  depends_on = ["walid"]
  tags {
    Name = "web-db-replica1-walid"
  }

}

resource "aws_db_instance" "web-db-replica2" {
  replicate_source_db = "${aws_db_instance.web-db.name}"
  instance_class      = "${aws_db_instance.web-db.instance_class}"
  availability_zone   = "${data.aws_availability_zones.available.names[1]}"

  tags {
    Name = "web-db-replica2-walid"
  }
}

################ elb #############

resource "aws_elb" "web-elb" {
  name            = "web-elb"
  subnets         = ["${aws_subnet.public1_subnet.id}", "${aws_subnet.public2_subnet.id}"]
  security_groups = ["${aws_security_group.sg-elb.id}"]

  listener {
    instance_port     = 80
    instance_protocol = "http"
    lb_port           = 80
    lb_protocol       = "http"
  }

  health_check {
    healthy_threshold   = "2"
    interval            = "30"
    target              = "TCP:80"
    timeout             = "3"
    unhealthy_threshold = "2"
  }

  cross_zone_load_balancing   = true
  idle_timeout                = 400
  connection_draining         = true
  connection_draining_timeout = 400

  tags {
    Name = "web-elb-walid"
  }
}

############# launch config ######

resource "aws_launch_configuration" "web-lc" {
  name_prefix   = "web-lc-"
  image_id      = "${data.aws_ami.web_ami.id}"
  instance_type = "${var.instance_type}"
  security_groups = ["${aws_security_group.sg-private.id}"]
  iam_instance_profile = "${aws_iam_instance_profile.web_s3_profile.id}"

  user_data = "${file("userdata.web")}"
}

################### Autoscaling ###############

resource "aws_autoscaling_group" "web-asg" {
  max_size                  = "${var.asg_max}"
  min_size                  = "${var.asg_min}"
  desired_capacity          = "${var.asg_capacity}"
  health_check_grace_period = "${var.asg_grace}"
  health_check_type         = "ELB"
  force_delete              = true
  load_balancers            = ["${aws_elb.web-elb.id}"]
  vpc_zone_identifier       = ["${aws_subnet.public1_subnet.id}", "${aws_subnet.public2_subnet.id}"]

  launch_configuration = "${aws_launch_configuration.web-lc.name}"

  tag {
    key                 = "Name"
    propagate_at_launch = true
    value               = "asg-web-walid"
  }
}

output "ip" {
  value = "${aws_elb.web-elb.dns_name}"
}
